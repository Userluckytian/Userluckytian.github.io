<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on /images/me/title1.png</title>
    <link>https://userluckytian.github.io/posts/</link>
    <description>Recent content in Posts on /images/me/title1.png</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://userluckytian.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Theme</title>
      <link>https://userluckytian.github.io/2014/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://userluckytian.github.io/2014/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://userluckytian.github.io/2014/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://userluckytian.github.io/2014/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.pngshould become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.pngAdditionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>ThreeBox 构建弧线</title>
      <link>https://userluckytian.github.io/2023/threebox-%E6%9E%84%E5%BB%BA%E5%BC%A7%E7%BA%BF/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://userluckytian.github.io/2023/threebox-%E6%9E%84%E5%BB%BA%E5%BC%A7%E7%BA%BF/</guid>
      <description>官网示例的效果图： 代码见参考文献（1） 代码解读（以构建一条弧线为例）： 概述（整体思路）： （1）明确要生成几个点，下面代码是假设生成25个点。（2）先生成x坐标和y坐标，以及随机生成一个高度值。下面代码是中有写这部分实现方式。（3）根据sin正弦定理，[0,180]对应的sin值得区间为[0, 1]。Math.PI 除了等于3.1415...之外，还可以看作是Π，一周的弧度是2Π。所以Π是180度。（4）通过sin值 乘以 高度 构建每个点位的Z轴值。（5）然后收集整理全部坐标即可！ 参考坐标图： 红色代表坐标轴， 黑色的点代表在xy轴上的每个【x，y】点， 黄色线是将x, y轴的各个点连接起来的连接线， 绿色线即构建之后的弧线， 浅墨绿色的线是每个黑点 乘以 最大高度得到的高度线。 代码块: buildOneArcLine(){ let line = new Array(); // 假设我们构建25个点 let arcSegments = 25; // 目标范围 [[-150，150], [-70, 70]]，下面假设 destination = [40, 60]; let destination = [300 * (Math.random() - 0.5), 140 * (Math.random() - 0.5)]; // 每条线的最大高度，是个常量,内部算法可不用在意, 下面假设 maxElevation = height let maxElevation = Math.pow(Math.abs(destination[0] * destination[1]), 0.5) * 80000; // 则下面的语句会得到： [40, 60] ==》 [1.</description>
    </item>
    
    <item>
      <title>文章2</title>
      <link>https://userluckytian.github.io/2023/%E6%96%87%E7%AB%A02/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://userluckytian.github.io/2023/%E6%96%87%E7%AB%A02/</guid>
      <description>Hello Hugo aaa bbb ccc11 </description>
    </item>
    
    <item>
      <title>文章1</title>
      <link>https://userluckytian.github.io/2023/%E6%96%87%E7%AB%A01/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://userluckytian.github.io/2023/%E6%96%87%E7%AB%A01/</guid>
      <description>Hello Hugo aaa bbb ccc </description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://userluckytian.github.io/2014/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://userluckytian.github.io/2014/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://userluckytian.github.io/2014/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://userluckytian.github.io/2014/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Introduction aux modèles (Hu)go</title>
      <link>https://userluckytian.github.io/2014/goisforlovers.fr/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://userluckytian.github.io/2014/goisforlovers.fr/</guid>
      <description>Hugo utilise l&amp;rsquo;excellente librairie go html/template pour son moteur de modèles. c&amp;rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c&amp;rsquo;est juste ce qu&amp;rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d&amp;rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.
Ce document est une introduction sur l&amp;rsquo;utilisation de Go templates.</description>
    </item>
    
  </channel>
</rss>
